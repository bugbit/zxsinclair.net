@page "/"
@implements IDisposable
@inject IJSRuntime JS
<div>
	<canvas style="background-color: green; position: relative; top: 10px; left: 10px;" width="640"
			height="480"></canvas>
	<div>Menu</div>
	<div>
		<div style="background-color:black ;background-image: url('/images/zxwallpaper.png'); background-repeat: no-repeat; background-position: bottom right">
		</div>
		Browse
	</div>
	Displaly the Window size: @windowWidth, @windowHeight
	<button class="btn btn-primary" @onclick="OnButtonClick">Get Dimensions</button>
</div>
@code
{
	public class WindowDimensions
	{
		public int Width { get; set; }
		public int Height { get; set; }
	}

	private IJSObjectReference? jsModule;
	private DotNetObjectReference<Index>? objRef;
	public int windowHeight, windowWidth;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			objRef = DotNetObjectReference.Create(this);
			jsModule = await JS.InvokeAsync<IJSObjectReference>("import", "./zxsinclair.module.window.js");

			var dimension = await jsModule.InvokeAsync<WindowDimensions>("getWindowSize");

			await jsModule.InvokeVoidAsync("addEventResize", objRef, nameof(OnWindowResize));
			Console.WriteLine($"{dimension.Width}x{dimension.Height}");
			windowHeight = dimension.Height;
			windowWidth = dimension.Width;
		}
	}

	[JSInvokable]
	public void OnWindowResize(WindowDimensions e)
	{
		windowHeight = e.Height;
		windowWidth = e.Width;
	}

	public void Dispose()
	{
		objRef?.Dispose();
	}

	private async Task OnButtonClick()
	{
		var dimension = await jsModule.InvokeAsync<WindowDimensions>("getWindowSize");

		windowHeight = dimension.Height;
		windowWidth = dimension.Width;
	}
}
