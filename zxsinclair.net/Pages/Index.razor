@page "/"
@implements IDisposable
@inject IJSRuntime JS
@inject HttpClient Http
<div>
    <canvas style="background-color: green; position: relative; top: 10px; left: 10px; z-index: 1;" width=" 640"
        height="480"></canvas>
    <div style="z-index: 1;">Keyboard</div>
    <div
        style="background-color: black;position: absolute; top:100px; left:0px; width: 640px; height: 300px; border-style: solid; border-width: 1px; z-index: 2;">
        <div
            style="width: 638px; height: 23px;background-color:black ;background-image: url('/images/zxwallpaper.png'); background-repeat: no-repeat; background-position: right">
        </div>
        <div style="position: relative; top: -22px; left: 0px;">X</div>
        <a href="https://github.com/bugbit/zxsinclair.net" target="_blank">ZXSinclair Emulador ZX Computers running on
            Blazor
            WebAssembly</a>
        <p>Version 1.0 - Nieblita edition. 4 December 2021</p>
        <p>Developed by 1996-2022 Oscar Hernandez Bañó</p>
    </div>
    @* <div>
        <p>Displaly the Window size: @windowWidth, @windowHeight</p>
        <button class="btn btn-primary" @onclick="OnButtonClick">Get Dimensions</button>
        </div> *@
</div>
@code
{
    public class WindowDimensions
    {
        public int Width { get; set; }
        public int Height { get; set; }
    }

    private IJSObjectReference? jsModule;
    private DotNetObjectReference<Index>? objRef;
    public int windowHeight, windowWidth;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            objRef = DotNetObjectReference.Create(this);
            jsModule = await JS.InvokeAsync<IJSObjectReference>("import", "./zxsinclair.module.window.js");

            var dimension = await jsModule.InvokeAsync<WindowDimensions>("getWindowSize");

            await jsModule.InvokeVoidAsync("addEventResize", objRef, nameof(OnWindowResize));

            Console.WriteLine($"{dimension.Width}x{dimension.Height}");
            windowHeight = dimension.Height;
            windowWidth = dimension.Width;
            StateHasChanged();

            //await Http.
        }
    }

    [JSInvokable]
    public void OnWindowResize(WindowDimensions e)
    {
        windowHeight = e.Height;
        windowWidth = e.Width;
        StateHasChanged();
    }

    public void Dispose()
    {
        objRef?.Dispose();
    }

    private async Task OnButtonClick()
    {
        var dimension = await jsModule.InvokeAsync<WindowDimensions>("getWindowSize");

        windowHeight = dimension.Height;
        windowWidth = dimension.Width;
    }
}
