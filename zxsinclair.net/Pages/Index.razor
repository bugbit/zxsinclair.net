@page "/"
@implements IDisposable
@inject IJSRuntime JS
@inject HttpClient Http
<div>
    <div
        style="background-color: green; position: relative; top: 10px; left: 10px; z-index: 1; width: 640px; height: 480px;">
        <Emulator Width="640" Height="400" />
    </div>
    <div style="z-index: 1;">
        <Keyboard />
    </div>
    @if (MenuVisible)
    {
        <div style="position: absolute; top:100px; left:0px; width: 640px; height: 300px; z-index: 2;">
            <Menu Width=640 Height=300 OnClose="OnMenuClose"></Menu>
        </div>
    }
    @* <div>
        <p>Displaly the Window size: @windowWidth, @windowHeight</p>
        <button class="btn btn-primary" @onclick="OnButtonClick">Get Dimensions</button>
        </div> *@
</div>
@code
{
    public class WindowDimensions
    {
        public int Width { get; set; }
        public int Height { get; set; }
    }

    private IJSObjectReference? jsModule;
    private DotNetObjectReference<Index>? objRef;
    public int windowHeight, windowWidth;
    public bool MenuVisible { get; set; } = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            objRef = DotNetObjectReference.Create(this);
            jsModule = await JS.InvokeAsync<IJSObjectReference>("import", "./zxsinclair.module.window.js");

            var dimension = await jsModule.InvokeAsync<WindowDimensions>("getWindowSize");

            await jsModule.InvokeVoidAsync("addEventResize", objRef, nameof(OnWindowResize));

            Console.WriteLine($"{dimension.Width}x{dimension.Height}");
            windowHeight = dimension.Height;
            windowWidth = dimension.Width;
            StateHasChanged();

            //await Http.
        }
    }

    [JSInvokable]
    public void OnWindowResize(WindowDimensions e)
    {
        windowHeight = e.Height;
        windowWidth = e.Width;
        StateHasChanged();
    }

    public void Dispose()
    {
        objRef?.Dispose();
    }

    private async Task OnButtonClick()
    {
        var dimension = await jsModule.InvokeAsync<WindowDimensions>("getWindowSize");

        windowHeight = dimension.Height;

        windowWidth = dimension.Width;
    }

    private void OnMenuClose() => MenuVisible = false;
}
